{"version":3,"sources":["redux/reducers/Reducer.js","redux/store.js","redux/actions/types.js","component/navbar.js","component/home.js","redux/actions/updateAction.js","component/lists.js","App.js","serviceWorker.js","index.js"],"names":["initialState","datas","activity","store","createStore","state","arguments","length","undefined","action","console","log","payload","type","Object","objectSpread","Navbar","react_default","a","createElement","reactstrap_es","className","pills","href","React","Component","Home","this","props","displayList","data","postItems","productDetails","map","product","md","style","padding","body","id","price","duration","display","connect","reduxState","List","activityList","columns","Header","accessor","Cell","value","react_table_es","activityDetails","list","App","es","navbar_Navbar","react_router_dom","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c16a865d.chunk.js","sourcesContent":["import { DISPLAY_LIST, ACTIVITY_LIST } from '../actions/types'\n\n\nconst initialState = {\n\ndatas:[],\nactivity:[]\n}\n\nexport default function (state = initialState, action){\n    console.log('action',action.payload)\n\n    switch(action.type){\n        case DISPLAY_LIST:\n        // const newState = { ...state}\n        // console.log('newstate', newState)\n        // newState.datas.push(action.payload)\n        // return newState;\n        // console.log('preeee', state)\n\n        \n        return {\n            ...state,\n            datas:action.payload\n            \n        }\n        case ACTIVITY_LIST:\n        return {\n            \n            activity:action.payload\n        }\n\n        default:\n        return state;\n    }\n\n}","import {createStore} from 'redux'\nimport rootReducer from './reducers/Reducer'\n\nconst store = createStore(rootReducer);\n\nexport default store;","export const DISPLAY_LIST = 'DISPLAY_LIST';\nexport const ACTIVITY_LIST = 'ACTIVITY_LIST';\n","import React from 'react';\nimport { Nav, NavItem, NavLink } from 'reactstrap';\n\nexport default class Navbar extends React.Component {\n  render() {\n    return (\n      <div>\n        <Nav className=\"ml-auto\" pills>\n          <NavItem>\n            <NavLink href=\"/home\" >Home</NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink href=\"/list\" >List</NavLink>\n          </NavItem>\n        </Nav>\n      </div>\n    );\n  }\n}\n\n","import React, { Component } from 'react';\nimport { Card, Button, CardTitle, CardText, Row, Col } from 'reactstrap';\nimport data from '../jsons/card.json'\nimport { connect } from 'react-redux';\nimport { displayList } from '../redux/actions/updateAction'\n\nclass Home extends Component {\n  componentWillMount(){\n    this.props.displayList(data);\n  }\n\n  render() {\n    const postItems = this.props.productDetails.datas.map(product => (\n      <Col md=\"3\" style={{padding:'50px'}}>  \n        <Card body>\n        <Button>{product.id}</Button>\n          <CardTitle>{product.price}</CardTitle>\n          <CardText>{product.duration}</CardText>\n        </Card>\n        </Col>\n\n    ));\n      console.log('data',data)\n    return (\n      <div>\n        Home Component\n        <Row style={{display:'inline-flex'}}>\n      \n        {postItems}\n        \n    </Row>\n      </div>\n    )\n  }\n}\nconst mapStateToProps = (reduxState) => {\n  console.log('mapstate', reduxState)\n  return { productDetails: reduxState }\n}\n\nexport default connect(mapStateToProps, {displayList}) (Home);","import {DISPLAY_LIST, ACTIVITY_LIST} from './types';\n\nexport const displayList = data => {\n    console.log(data)\n    return{\n        type: DISPLAY_LIST,\n        payload: data\n    }\n}\n\nexport const activityList = list => {\n    console.log(list)\n    return{\n        type: ACTIVITY_LIST,\n        payload: list\n    }\n}\n\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport { activityList } from '../redux/actions/updateAction'\nimport activity from '../jsons/activity.json'\nimport { Table } from 'reactstrap';\nimport ReactTable from \"react-table\";\nimport 'react-table/react-table.css'\n\nclass List extends Component {\n  componentWillMount(){\n    this.props.activityList(activity);\n  }\n  render() {\n    const columns = [{\n      Header: 'Sl.no',\n      accessor: 'id' // String-based value accessors!\n    }, {\n      Header: 'Activity',\n      accessor: 'act',\n      Cell: props => <span className='number'>{props.value}</span> // Custom cell components!\n    }]\n    // const activityItems = this.props.activityDetails.activity.map(activities => (\n    //   <tr>\n    //         <td>{activities.id}</td>\n    //         <td>{activities.act}</td>\n    //       </tr>\n\n    // ));\n    return <ReactTable\n    data={activity}\n    columns={columns}\n  />\n    \n    // return (\n    //   <div>\n    //     List Component\n    //     <Table bordered>\n    //     <thead>\n    //       <tr>\n    //         <th>Sl.no</th>\n    //         <th>Activity</th>\n    //       </tr>\n    //     </thead>\n    //     <tbody>\n    //       {activityItems}\n    //     </tbody>\n    //     </Table>\n    //   </div>\n    // )\n  }\n}\nconst mapStateToProps = (reduxState) => {\n  console.log('mapstate', reduxState)\n  return { activityDetails: reduxState }\n}\n\nexport default connect (mapStateToProps, {activityList}) (List);\n\n","import React, { Component } from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom'\nimport './App.css';\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\nimport Navbar from '../src/component/navbar'\nimport Home from '../src/component/home'\nimport List from '../src/component/lists'\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={ store }>\n      <div className=\"App\">\n        <Navbar />\n        <BrowserRouter>\n        <Route exact path=\"/\" component={Home}/>\n        <Route path=\"/home\" component={Home}/>\n        <Route path=\"/list\" component={List}/>\n        </BrowserRouter>\n       \n\n      </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}